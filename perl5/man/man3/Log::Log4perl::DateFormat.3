.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateFormat 3"
.TH DateFormat 3 "2020-07-22" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::DateFormat \- Log4perl advanced date formatter helper class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&      # Either in a log4j.conf file ...
\&    log4perl.appender.Logfile.layout = \e
\&        Log::Log4perl::Layout::PatternLayout
\&    log4perl.appender.Logfile.layout.ConversionPattern = %d{MM/dd HH:mm} %m
\&
\&      # ... or via the PatternLayout class ...
\&    use Log::Log4perl::Layout::PatternLayout;
\&    my $layout = Log::Log4perl::Layout::PatternLayout\->new(
\&        "%d{HH:mm:ss,SSS} %m");
\&
\&      # ... or even directly with this helper class:
\&    use Log::Log4perl::DateFormat;
\&    my $format = Log::Log4perl::DateFormat\->new("HH:mm:ss,SSS");
\&    my $time = time();
\&    print $format\->format($time), "\en";
\&        # => "17:02:39,000"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Log::Log4perl::DateFormat\*(C'\fR is a helper class for the 
advanced date formatting functions in \f(CW\*(C`Log::Log4perl::Layout::PatternLayout\*(C'\fR,
and adheres (mostly) to the log4j SimpleDateFormat spec available on
.PP
.Vb 1
\&    http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html
.Ve
.PP
It supports the following placeholders:
.PP
.Vb 10
\&    Symbol Meaning              Presentation    Example
\&    \-\-\-\-\-\- \-\-\-\-\-\-\-              \-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-
\&    G      era designator       (Text)          AD
\&    e      epoch seconds        (Number)        1315011604
\&    y      year                 (Number)        1996
\&    M      month in year        (Text & Number) July & 07
\&    d      day in month         (Number)        10
\&    h      hour in am/pm (1~12) (Number)        12
\&    H      hour in day (0~23)   (Number)        0
\&    m      minute in hour       (Number)        30
\&    s      second in minute     (Number)        55
\&    S      millisecond          (Number)        978
\&    E      day in week          (Text)          Tuesday
\&    D      day in year          (Number)        189
\&    F      day of week in month (Number)        2 (2nd Wed in July)
\&    w      week in year         (Number)        27
\&    W      week in month        (Number)        2
\&    a      am/pm marker         (Text)          PM
\&    k      hour in day (1~24)   (Number)        24
\&    K      hour in am/pm (0~11) (Number)        0
\&    z      time zone            (Text)          Pacific Standard Time
\&    Z      RFC 822 time zone    (Text)          \-0800
\&    \*(Aq      escape for text      (Delimiter)
\&    \*(Aq\*(Aq     single quote         (Literal)       \*(Aq
\&
\&    Presentation explanation:
\&
\&    (Text): 4 or more pattern letters\-\-use full form, < 4\-\-use short or 
\&            abbreviated form if one exists. 
\&
\&    (Number): the minimum number of digits. Shorter numbers are 
\&              zero\-padded to this amount. Year is handled 
\&              specially; that is, if the count of \*(Aqy\*(Aq is 2, the 
\&              Year will be truncated to 2 digits. 
\&
\&    (Text & Number): 3 or over, use text, otherwise use number.
.Ve
.PP
For example, if you want to format the current Unix time in \f(CW"MM/dd HH:mm"\fR
format, all you have to do is specify it in the \f(CW%d\fR{...} section of the
PatternLayout in a Log4perl configuration file:
.PP
.Vb 5
\&    # log4j.conf
\&    # ...
\&    log4perl.appender.Logfile.layout = \e
\&        Log::Log4perl::Layout::PatternLayout
\&    log4perl.appender.Logfile.layout.ConversionPattern = %d{MM/dd HH:mm} %m
.Ve
.PP
Same goes for Perl code defining a PatternLayout for Log4perl:
.PP
.Vb 3
\&    use Log::Log4perl::Layout::PatternLayout;
\&    my $layout = Log::Log4perl::Layout::PatternLayout\->new(
\&        "%d{MM/dd HH:mm} %m");
.Ve
.PP
Or, on a lower level, you can use the class directly:
.PP
.Vb 4
\&    use Log::Log4perl::DateFormat;
\&    my $format = Log::Log4perl::DateFormat\->new("MM/dd HH:mm");
\&    my $time = time();
\&    print $format\->format($time), "\en";
.Ve
.PP
While the \f(CW\*(C`new()\*(C'\fR method is expensive, because it parses the format
strings and sets up all kinds of structures behind the scenes, 
followup calls to \f(CW\*(C`format()\*(C'\fR are fast, because \f(CW\*(C`DateFormat\*(C'\fR will
just call \f(CW\*(C`localtime()\*(C'\fR and \f(CW\*(C`sprintf()\*(C'\fR once to return the formatted
date/time string.
.PP
So, typically, you would initialize the formatter once and then reuse
it over and over again to display all kinds of time values.
.PP
Also, for your convenience, 
the following predefined formats are available, just as outlined in the
log4j spec:
.PP
.Vb 5
\&    Format   Equivalent                     Example
\&    ABSOLUTE "HH:mm:ss,SSS"                 "15:49:37,459"
\&    DATE     "dd MMM yyyy HH:mm:ss,SSS"     "06 Nov 1994 15:49:37,459"
\&    ISO8601  "yyyy\-MM\-dd HH:mm:ss,SSS"      "1999\-11\-27 15:49:37,459"
\&    APACHE   "[EEE MMM dd HH:mm:ss yyyy]"   "[Wed Mar 16 15:49:37 2005]"
.Ve
.PP
So, instead of passing
.PP
.Vb 1
\&    Log::Log4perl::DateFormat\->new("HH:mm:ss,SSS");
.Ve
.PP
you could just as well say
.PP
.Vb 1
\&    Log::Log4perl::DateFormat\->new("ABSOLUTE");
.Ve
.PP
and get the same result later on.
.SS "Known Shortcomings"
.IX Subsection "Known Shortcomings"
The following placeholders are currently \fInot\fR recognized, unless
someone (and that could be you :) implements them:
.PP
.Vb 6
\&    F day of week in month
\&    w week in year 
\&    W week in month
\&    k hour in day 
\&    K hour in am/pm
\&    z timezone (but we got \*(AqZ\*(Aq for the numeric time zone value)
.Ve
.PP
Also, \f(CW\*(C`Log::Log4perl::DateFormat\*(C'\fR just knows about English week and
month names, internationalization support has to be added.
.SH "Millisecond Times"
.IX Header "Millisecond Times"
More granular timestamps down to the millisecond are also supported,
just provide the millsecond count as a second argument:
.PP
.Vb 5
\&    # Advanced time, resultion in milliseconds
\&    use Time::HiRes;
\&    my ($secs, $msecs) = Time::HiRes::gettimeofday();
\&    print $format\->format($secs, $msecs), "\en";
\&        # => "17:02:39,959"
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2002\-2016 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Please contribute patches to the project on Github:
.PP
.Vb 1
\&    http://github.com/mschilli/log4perl
.Ve
.PP
Send bug reports or requests for enhancements to the authors via our
.PP
\&\s-1MAILING LIST\s0 (questions, bug reports, suggestions/patches): 
log4perl\-devel@lists.sourceforge.net
.PP
Authors (please contact them via the list above, not directly):
Mike Schilli <m@perlmeister.com>,
Kevin Goess <cpan@goess.org>
.PP
Contributors (in alphabetical order):
Ateeq Altaf, Cory Bennett, Jens Berthold, Jeremy Bopp, Hutton
Davidson, Chris R. Donnelly, Matisse Enzer, Hugh Esco, Anthony
Foiani, James FitzGibbon, Carl Franks, Dennis Gregorovic, Andy
Grundman, Paul Harrington, Alexander Hartmaier  David Hull, 
Robert Jacobson, Jason Kohles, Jeff Macdonald, Markus Peter, 
Brett Rann, Peter Rabbitson, Erik Selberg, Aaron Straup Cope, 
Lars Thegler, David Viner, Mac Yang.
