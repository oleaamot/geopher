.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Filter::Boolean 3"
.TH Filter::Boolean 3 "2020-07-22" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::Filter::Boolean \- Special filter to combine the results of others
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    log4perl.logger = WARN, AppWarn, AppError
\&
\&    log4perl.filter.Match1       = sub { /let this through/ }
\&    log4perl.filter.Match2       = sub { /and that, too/ }
\&    log4perl.filter.MyBoolean       = Log::Log4perl::Filter::Boolean
\&    log4perl.filter.MyBoolean.logic = Match1 || Match2
\&
\&    log4perl.appender.Screen        = Log::Dispatch::Screen
\&    log4perl.appender.Screen.Filter = MyBoolean
\&    log4perl.appender.Screen.layout = Log::Log4perl::Layout::SimpleLayout
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes, it's useful to combine the output of various filters to
arrive at a log/no log decision. While Log4j, Log4perl's mother ship,
chose to implement this feature as a filter chain, similar to Linux' \s-1IP\s0 chains,
Log4perl tries a different approach.
.PP
Typically, filter results will not need to be passed along in chains but 
combined in a programmatic manner using boolean logic. \*(L"Log if
this filter says 'yes' and that filter says 'no'\*(R" 
is a fairly common requirement but hard to implement as a chain.
.PP
\&\f(CW\*(C`Log::Log4perl::Filter::Boolean\*(C'\fR is a special predefined custom filter
for Log4perl which combines the results of other custom filters 
in arbitrary ways, using boolean expressions:
.PP
.Vb 1
\&    log4perl.logger = WARN, AppWarn, AppError
\&
\&    log4perl.filter.Match1       = sub { /let this through/ }
\&    log4perl.filter.Match2       = sub { /and that, too/ }
\&    log4perl.filter.MyBoolean       = Log::Log4perl::Filter::Boolean
\&    log4perl.filter.MyBoolean.logic = Match1 || Match2
\&
\&    log4perl.appender.Screen        = Log::Dispatch::Screen
\&    log4perl.appender.Screen.Filter = MyBoolean
\&    log4perl.appender.Screen.layout = Log::Log4perl::Layout::SimpleLayout
.Ve
.PP
\&\f(CW\*(C`Log::Log4perl::Filter::Boolean\*(C'\fR's boolean expressions allow for combining
different appenders by name using \s-1AND\s0 (&& or &), \s-1OR\s0 (|| or |) and \s-1NOT\s0 (!) as
logical expressions. Parentheses are used for grouping. Precedence follows
standard Perl. Here's a bunch of examples:
.PP
.Vb 3
\&    Match1 && !Match2            # Match1 and not Match2
\&    !(Match1 || Match2)          # Neither Match1 nor Match2
\&    (Match1 && Match2) || Match3 # Both Match1 and Match2 or Match3
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Log4perl::Filter,
Log::Log4perl::Filter::LevelMatch,
Log::Log4perl::Filter::LevelRange,
Log::Log4perl::Filter::MDC,
Log::Log4perl::Filter::StringRange
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2002\-2013 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Please contribute patches to the project on Github:
.PP
.Vb 1
\&    http://github.com/mschilli/log4perl
.Ve
.PP
Send bug reports or requests for enhancements to the authors via our
.PP
\&\s-1MAILING LIST\s0 (questions, bug reports, suggestions/patches): 
log4perl\-devel@lists.sourceforge.net
.PP
Authors (please contact them via the list above, not directly):
Mike Schilli <m@perlmeister.com>,
Kevin Goess <cpan@goess.org>
.PP
Contributors (in alphabetical order):
Ateeq Altaf, Cory Bennett, Jens Berthold, Jeremy Bopp, Hutton
Davidson, Chris R. Donnelly, Matisse Enzer, Hugh Esco, Anthony
Foiani, James FitzGibbon, Carl Franks, Dennis Gregorovic, Andy
Grundman, Paul Harrington, Alexander Hartmaier  David Hull, 
Robert Jacobson, Jason Kohles, Jeff Macdonald, Markus Peter, 
Brett Rann, Peter Rabbitson, Erik Selberg, Aaron Straup Cope, 
Lars Thegler, David Viner, Mac Yang.
