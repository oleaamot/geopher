.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Date::Manip::Problems 3"
.TH Date::Manip::Problems 3 "2022-06-01" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Problems \- problems and bugs
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
The following are not bugs in Date::Manip, but they may give some people
problems.
.IP "\fBUnable to determine Time Zone\fR" 4
.IX Item "Unable to determine Time Zone"
If you ever get the message that Date::Manip was unable to determine the
timezone, you need to provide that information to your script.
Please refer to the Date::Manip::TZ documentation for a discussion
of this problem.
.IP "\fBCalculations appear to be off by an hour\fR" 4
.IX Item "Calculations appear to be off by an hour"
Due to daylight saving time (especially the spring change where
the time typically moves forward from 02:00 to 03:00), any date
calculation which would intuitively report a time in that range
will also move forward (or backward as the case may be).
.Sp
*NOTE* This should be less of a problem since 6.30 with the addition
of semi-exact deltas.
.IP "\fBMissing date formats\fR" 4
.IX Item "Missing date formats"
Due to the large number of date formats that Date::Manip \s-1CAN\s0 process,
people often assume that other formats that they want to use should
work as well, and when they don't, it comes as a surprise.
.Sp
With the much improved parsing of 6.00, many formats can be added
easily, though unless they are of general use, I'll probably suggest
that you use parse_format instead.
.Sp
There is a class of formats that I do not plan to add however.
.Sp
I have frequently been asked to add formats such as \*(L"the 15th of last
month\*(R", or \*(L"Monday of next week\*(R". I do not intend to add these date
formats to Date::Manip, but since I have received the request several
times, I decided to include my reasoning here.
.Sp
Date::Manip can parse pretty much any static date format that I could
think of or find reference to. Dates such as \*(L"today\*(R", \*(L"Jan 12\*(R", or
\&\*(L"2001\-01\-01\*(R" are all understood.
.Sp
These are fairly limited however. Many very common date formats are
best thought of as a date plus a modification. For example,
\&\*(L"yesterday\*(R" is actually determined internally as \*(L"today\*(R" plus a
modification of \*(L"\- 1 day\*(R".  \*(L"2nd Sunday in June\*(R" is determined as
\&\*(L"June 1\*(R" modified to the 2nd Sunday.
.Sp
As these types of formats were added over time, I quickly realized
that the number of possible date plus modification formats was
huge. The number of combinations has caused the parsing in Date::Manip
to be quite complex, and adding new formats occasionally causes
unexpected conflicts with other formats.
.Sp
The first time I received a request similar to \*(L"the 15th of last
month\*(R", I intended to add it, but as I analyzed it to see what changes
needed to be made to support it, I realized that this needed to be
expressed as a date plus \s-1TWO\s0 modifications. In other words, today
modified to last month modified to the 15th day of the month.
.Sp
As bad as date plus modification formats are, a date plus \s-1TWO\s0
modifications would be exponentially worse. On realizing that, I
decided that Date::Manip will not support this type of format.
.Sp
Although I apologize for the inconvenience, I do not intend to change
my position on this.
.IP "\fBDate::Manip is slow\fR" 4
.IX Item "Date::Manip is slow"
Date::Manip is one of the slower Date/Time modules due to the fact that
it is huge and written entirely in perl.  I have done a lot of work
optimizing it since 6.xx came out, and additional work is planned,
but even at it's best, it will probably be slower than other modules.
.Sp
Some things that will definitely help:
.Sp
Date::Manip 5.xx was very slow.  A lot of work went into speeding it up
as I rewrote it for the 6.xx release, and it should be noted that
initial tests show version 6.xx to be around twice as fast as 5.xx.
There is one notable exception to this speedup.  If you use Date::Manip
to parse dates from a wide variety of timezones, 6.xx will be significantly
slower than 5.xx.  The reason for this is that each time a new timezone is
accessed, 6.xx does quite a bit of work to initialize it.  5.xx does not
have this overhead, so it can parse dates from any number of timezones
without a speed penalty.  However, 5.xx does \s-1NOT\s0 handle timezones correctly,
so many of the dates will be incorrect.  If timezones are important to you,
there is no way to use 5.xx and get accurate results.
.Sp
If you only parse dates from a single timezone (which is more often what
you are doing), 6.xx is significantly faster than 5.xx.
.Sp
\&\s-1ISO\-8601\s0 dates are parsed first and fastest.  If you have the flexibility
to define the date format, use \s-1ISO\-8601\s0 formats whenever possible.
.Sp
Avoid parsing dates that are referenced against the current time (in 2
days, today at noon, etc.).  These take a lot longer to parse.
.Sp
Business date calculations are extremely slow.  You should consider
alternatives if possible (i.e. doing the calculation in exact mode and
then multiplying by 5/7).  Who needs a business date more accurate
than \*(L"6 to 8 weeks\*(R" anyway, right :\-)
.IP "\fBMemory leak\fR" 4
.IX Item "Memory leak"
There is a known memory leak in perl related to named regexp captures
that directly affects Date::Manip . The leak is in all versions of
perl up to (and including) the following versions:
.Sp
.Vb 4
\&   5.10.1
\&   5.12.5
\&   5.14.3
\&   5.15.5
.Ve
.Sp
The bug has been fixed in:
.Sp
.Vb 2
\&   5.15.6
\&   5.16.0
.Ve
.Sp
If a maintenance release is done for any of the other releases (5.10,
5.12, 5.14), that includes the patch, I'll update this section to
include that information.
.Sp
Date::Manip 5.xx is not susceptible, so using it may be a feasible
workaround, but if you need accurate timezone handling, this isn't
possible.
.Sp
Simple tests estimate the leak to be about 3 \s-1MB\s0 per 10,000 dates
parsed, so unless you're parsing hundreds of thousands, or millions of
dates, the leak probably won't be a problem on systems with moderate
amounts of memory. And if you're parsing that many dates, the
relatively slow Date::Manip may not be the correct module for you to
use anyway.
.IP "\fBDmake error on strawberry perl\fR" 4
.IX Item "Dmake error on strawberry perl"
Users of Strawberry perl on windows may encounter an error similar
to the following:
.Sp
.Vb 1
\&   dmake: makefile: line 3016: Error: \-\- Input line too long, increase MAXLINELENGTH
.Ve
.Sp
This is a known problem with some versions of strawberry perl, and
I can't fix it in Date::Manip.  If you encounter this problem, you
can install the package manually using the commands:
.Sp
.Vb 6
\&   c:> cpan
\&   cpan> look Date::Manip::Date
\&   > perl Makefile.PL
\&   > dmake MAXLINELENGTH=300000 make
\&   > dmake MAXLINELENGTH=300000 make test
\&   > dmake MAXLINELENGTH=300000 make install
.Ve
.Sp
You can find more details here:
.Sp
.Vb 1
\&   http://www.nntp.perl.org/group/perl.win32.vanilla/2011/02/msg287.html
.Ve
.IP "\fBUsing functions/methods which are not supported\fR" 4
.IX Item "Using functions/methods which are not supported"
There have been a handful of incidents of people using a function from
Date::Manip which were not documented in the manual.
.Sp
Date::Manip consists of a large number of user functions which are
documented in the manual. These are designed to be used by other
programmers, and I will not make any backwards incompatible changes in
them unless there is a very compelling reason to do so, and in that
case, the change will be clearly documented in the
Date::Manip::Changes6 documentation for this module.
.Sp
Date::Manip also includes a large number of functions which are \s-1NOT\s0
documented. These are for internal use only.  Please do not use them!
I can (and do) change their functionality, and even their name, without notice,
and without apology!  Some of these internal functions even have test
scripts, but that is not a guarantee that they will not change, nor is
any support implied. I simply like to run regression tests on as much
of Date::Manip as possible.
.Sp
As of the most recent versions of Date::Manip, all internal functions
have names that begin with an underscore (_). If you choose to use
them directly, it is quite possible that new versions of Date::Manip
will cause your programs to break due to a change in how those
functions work.
.Sp
Any changes to internal functions will not be documented, and will not
be regarded by me as a backwards incompatibility. Nor will I (as was
requested in one instance) revert to a previous version of the
internal function.
.Sp
If you feel that an internal function is of more general use, feel
free to contact me with an argument of why it should be \*(L"promoted\*(R".  I
welcome suggestions and will definitely consider any such request.
.IP "\fB\s-1RCS\s0 Control\fR" 4
.IX Item "RCS Control"
If you try to put Date::Manip under \s-1RCS\s0 control, you are going to have
problems.  Apparently, \s-1RCS\s0 replaces strings of the form \*(L"$Date...$\*(R" with
the current date.  This form occurs all over in Date::Manip.  To prevent the
\&\s-1RCS\s0 keyword expansion, checkout files using:
.Sp
.Vb 1
\&   co \-ko
.Ve
.Sp
Since very few people will ever have a desire to do this (and I don't
use \s-1RCS\s0), I have not worried about it, and I do not intend to try to
workaround this problem.
.SH "KNOWN COMPLAINTS"
.IX Header "KNOWN COMPLAINTS"
Date::Manip 6.xx has gotten some complaints (far more than 5.xx if the
truth be told), so I'd like to address a couple of them here.  Perhaps
an understanding of why some of the changes were made will allay some
of the complaints.  If not, people are always welcome to stick with
the 5.xx release. I will continue to support the 5.xx releases for a
couple years (though I do \s-1NOT\s0 plan to add functionality to it).
.PP
These complaints come both from both the \s-1CPAN\s0 ratings site:
.PP
.Vb 1
\&   http://cpanratings.perl.org/dist/Date\-Manip
.Ve
.PP
and from personal email.
.IP "\fBRequires perl 5.10\fR" 4
.IX Item "Requires perl 5.10"
The single most controversial change made in 6.00 is that it now
required perl 5.10.0 or higher. Most of the negative feedback I've
received is due to this.
.Sp
In the past, I've avoided using new features of perl in order to allow
Date::Manip to run on older versions of perl.  Prior to perl 5.10,
none of the new features would have had a major impact on how
Date::Manip was written so this practice was justified. That all
changed with the release of perl 5.10.
.Sp
One of the aspects of Date::Manip that has received the most positive
response is the ability to parse almost every conceivable date format.
Unfortunately, as I've added formats, the parsing routine became more
and more complicated, and maintaining it was one of the least
enjoyable aspect in maintaining Date::Manip . In fact, for several
years I'd been extremely reluctant to add new formats due to the fact
that too often, adding a new format broke other formats.
.Sp
As I was rewriting Date::Manip, I was looking for ways to improve the
parsing and to make maintaining it easier. Perl 5.10 provides the
feature \*(L"named capture buffers\*(R". Named capture buffers not only
improves the ease of maintaining the complex regular expressions used
by Date::Manip, it makes it dramatically easier to add additional
formats in a way that is much less likely to interfere with other
formats. The parsing in 6.00 is so much more robust, extensible, and
flexible, that it will make parser maintenance possible for many years
to come at a fraction of the effort and risk.
.Sp
It was too much to turn down. Hopefully, since 5.10 has been out for
some time now, this will not prohibit too many people from using the
new version of Date::Manip. I realize that there are many people out
there using older versions of perl who do not have the option of
upgrading perl.  The decision to use 5.10 wasn't made lightly... but I
don't regret making it. I apologize to users who, as a result, cannot
use 6.00 . Hopefully in the future you'll be able to benefit from the
improvements in 6.00.
.Sp
One complaint I've received is that this in some way makes Date::Manip
backwards incompatible, but this is not an accurate complaint. Version
6.xx \s-1DOES\s0 include some backwards incompatibilities (and these are
covered in the Date::Manip::Migration5to6 document), however in almost
all cases, these incompatibilities are with infrequently used
features, or workarounds are in place to allow deprecated features to
continue functioning for some period of time.
.Sp
Though I have no data to confirm this, I suspect that 90% or more of
all scripts which were written with Date::Manip 5.xx will continue to
work unmodified with 6.xx (of course, you should still refer to the
migration document to see what features are deprecated or changed to
make sure that you don't need to modify your script so that it will
continue to work in the future). Even with scripts that need to be
changed, the changes should be trivial.
.Sp
So, Date::Manip 6.xx is almost entirely backward compatible with 5.xx
(to the extent that you would expect any major version release to be
compatible with a previous major version).
.Sp
The change is only in the requirements necessary to get Date::Manip
6.xx to run.
.Sp
Obviously, it's not reasonable to say that Date::Manip should never be
allowed to switch minimum perl versions. At some point, you have to
let go of an old version if you want to make use of the features of
the newer version. The question is, did I jump to 5.10 too fast?
.Sp
The negative ratings I see in the \s-1CPAN\s0 ratings complain that I no
longer support perl 5.6 and perl 5.8.
.Sp
With respect to 5.6, perl 5.6 was released in March of 2000 (that's
before Windows \s-1XP\s0 which was released in 2001). Date::Manip 6.00 was
released at the end of 2009.  To be honest, I don't really feel much
sympathy for this complaint. Software that is 9 years old is \s-1ANCIENT.\s0
People may choose to use it... but please don't complain when new
software comes out that doesn't support it.
.Sp
The argument for perl 5.8 is much more compelling. Although 5.8 was
released well before Date::Manip 6.00 (July of 2002), there were no
major perl releases until 5.10 came out in December of 2007, so 5.8
was state-of-the art as little as 2 years prior to the release of
Date::Manip 6.xx.
.Sp
I agree completely with the argument that abandoning 5.8 only 2 years
after it was the current version is too soon. For that reason, I
continued to support the Date::Manip 5.xx releases for several years.
As of December 2012 (5 years after the release of perl 5.10), the 5.xx
release is no longer supported (in that I will not patch it or provide
support for it's use).  However, it is still bundled into the Date::Manip
distribution so it can still be used.  I do not have any plans for
removing it, though I may do so at some point.
.IP "\fBToo many modules\fR" 4
.IX Item "Too many modules"
One minor complaint is that there are too many files. One person
specifically objects to the fact that there are over 470 modules
covering non-minute offsets. This complaint is (\s-1IMO\s0) silly.
.Sp
Date::Manip supports \s-1ALL\s0 historical time zones, including those with
non-minute offsets, and so there will be information for those time
zones, even though they are not currently in use.
.Sp
I could of course store all of the information in one big module, but
that means that you have to load all of that data every time you use
Date::Manip, and I find that to be a very poor solution. Instead,
storing the information in a per-time zone and per-offset manner
dramatically decreases the amount of data that has to be loaded.
.Sp
While it is true that Date::Manip includes over 900 modules for all of
the time zone information, most implementations of time zone handling
also choose to break up the data into a large number of files.
.Sp
My linux distribution (openSuSE 11.2 at the time of writing this) uses
the standard zoneinfo database, and at this point, there are over 1700
files included in /usr/share/zoneinfo (though it does appear that
there is some duplication of information). Current versions of RedHat
also use over 1700 files, so Date::Manip isn't treating the time zone
data in a new or unreasonable way.
.IP "\fBObjects are large\fR" 4
.IX Item "Objects are large"
One complaint that was put on the \s-1CPAN\s0 ratings site was that the \s-1OO\s0
interface is \*(L"a dud\*(R" due to the size of it's objects. The complaint is
that a Date::Manip::Date object is 115K while it should (according to
the complaint) only require that you need to save the seconds from the
epoch, zone, and a couple other pieces of information, all of which
could probably be stored in 100 bytes or less.
.Sp
This complaint is not accurate, and comes from a misunderstanding
of the objects used by Date::Manip.
.Sp
Date::Manip is very configurable, and contains a great deal of
information which could theoretically be calculated on the fly, but
which would greatly reduce it's performance. Instead, in the interest
of improving performance, the data is cached, and since the data is
virtually all potentially object specific, it has to be somehow linked
to the object.
.Sp
For example, Date::Manip allows you to parse dates in several
languages.  Each language has a large number of regular expressions
which are used to do the actual parsing. Instead of recreating these
regular expressions each time they are needed, they are created once
and stored in an object (specifically, a Date::Manip::Base object).
The size of the Date::Manip::Base object is almost 15K (due primarily
to the regular expressions used in parsing dates in the selected
language).
.Sp
Similarly, a description of the time zones are stored in a second
object (a Date::Manip::TZ object).  The size of the Date::Manip::TZ
object starts at 100K. That may seem excessive, but you have to
remember that there are almost 500 time zones, and they have to be
indexed by name, alias, abbreviation, and offset.  In addition, critical
dates (dates where the offset from \s-1GMT\s0 change such as during a daylight
saving time change) along with information such as offsets, abbreviation,
etc., are all cached in order to improve performance.  By the time you
do this, it does take a fair bit of space.  It should also be noted
that the full description of each timezone is only stored in the
object when the timezone is actually used, so if you use a lot of
timezones, this object will grow slowly as new timezones are used.
.Sp
The size of the actual Date::Manip::Date object is a little over 300
bytes.  However, each includes a pointer to a Date::Manip::Base and
a Date::Manip::TZ object (and due to how the object was being looked
at in the complaint, they were reporting the size of all three objects,
\&\s-1NOT\s0 just the Date::Manip::Date object).
.Sp
Both the Date::Manip::Base and Date::Manip::TZ objects are reused by
any number of Date::Manip::Date objects. They can almost be thought of
as global data, except that they are accessible in the standard \s-1OO\s0
manner, and you are allowed to modify them on a per-object basis which
\&\s-1WILL\s0 mean that you have to store more data. If you work with multiple
configurations (see Date::Manip::Config), you'll need multiple Base
and \s-1TZ\s0 objects. However, most of the time you will not need to do
this.
.Sp
The actual Date::Manip::Date object is a bit larger than suggested in
the complaint, but it should be noted that Date::Manip actually stores
the dates in a number of different formats (a string of the form
\&\s-1YYYYMMDDHH:MN:SS\s0 and a list [\s-1YYYY,MM,DD,HH,MN,SS\s0] in the time zone it
was parsed in, the local time zone (if different) and \s-1GMT.\s0 By caching
this information as it is used, it has a huge impact on the
performance.
.Sp
So, Date::Manip in typical usage consists of one 100K Date::Manip::TZ
object, one 15K Date::Manip::Base objects, and any number of small 300
byte Date::Manip::Date objects.  Date::Manip::Delta objects are even
smaller. Date::Manip::Recur objects are also small, but they contain
any number of Date objects in them.
.Sp
I am certainly open to suggestions as to how I can improve the \s-1OO\s0
interface... but I don't believe it is a dud. While I'm not an expert
at \s-1OO\s0 programming, I believe that I followed pretty standard and
accepted procedures for accessing the data.
.Sp
Please refer to the Date::Manip::Objects document for more
information.
.IP "\fBDate::Manip has an inconsistent interface\fR" 4
.IX Item "Date::Manip has an inconsistent interface"
I've gotten a few complaints that the interface to Date::Manip is
inconsistent... and I agree (at least when referring to the functional
interfaces).
.Sp
Date::Manip was originally written in an unplanned way... as a need/want
came up, it was extended. That's not the way to write a major package
of course, but it wasn't expected to be a major package at the start.
.Sp
As it became more and more widely used, I too wished for a more
consistent interface, but I did not want to break backward compatibility
for everyone using it.
.Sp
When 6.xx was written, I spent a good deal of time trying to make a
very standard \s-1OO\s0 interface, so I do not believe that this complaint
can be applied to the \s-1OO\s0 interface (though I'm interested in
suggestions for improving it of course).
.Sp
As far as the functional interface goes, I'll continue to support it
in a backward compatible (and therefore inconsistent) form. I'd
encourage the use of the \s-1OO\s0 interface whenever possible.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
If you find a bug in Date::Manip, there are three ways to send it to me.
In order of preference, they are:
.IP "GitHub" 4
.IX Item "GitHub"
You can submit it as an issue on GitHub.  This can be done at the following
\&\s-1URL:\s0
.Sp
<https://github.com/SBECK\-github/Date\-Manip>
.Sp
This is the preferred method.  Please submit problems requests as GitHub issues
if at all possible.
.IP "Direct email" 4
.IX Item "Direct email"
You are welcome to send it directly to me by email.  The email address
to use is:  sbeck@cpan.org.
.Sp
Please note that because cpan.org addresses are published, they are used by
a lot of spammers and phishers.  Please include the name of the perl module
in the subject line of \s-1ALL\s0 messages sent to my cpan.org address or it will
likely be missed.
.IP "\s-1CPAN\s0 Bug Tracking" 4
.IX Item "CPAN Bug Tracking"
You can submit it using the \s-1CPAN\s0 tracking too.  This can be done at the
following \s-1URL:\s0
.Sp
<http://rt.cpan.org/Public/Dist/Display.html?Name=Date\-Manip>
.Sp
There was discussion of halting this service a while back (though it continues
to function), so only use this as a last resort.
.PP
Please do not use other means to report bugs (such as forums for a specific
\&\s-1OS\s0 or Linux distribution) as it is impossible for me to keep up with all of
them.
.PP
When filing a bug report, please include the following information:
.IP "\fBDate::Manip version\fR" 4
.IX Item "Date::Manip version"
Please include the version of Date::Manip you are using.  You can get
this by using the script:
.Sp
.Vb 2
\&   use Date::Manip;
\&   print DateManipVersion(1),"\en";
.Ve
.Sp
or
.Sp
.Vb 3
\&   use Date::Manip::Date;
\&   $obj = new Date::Manip::Date;
\&   print $obj\->version(1),"\en";
.Ve
.IP "\fBPerl information\fR" 4
.IX Item "Perl information"
Please include the output from \*(L"perl \-V\*(R"
.PP
If you have a problem using Date::Manip that perhaps isn't a bug
(can't figure out the syntax, etc.), you're in the right place.  Start
by reading the main Date::Manip documentation, and the other documents
that apply to whatever you are trying to do.  If this still doesn't
answer your question, mail me directly.
.PP
I would ask that you be reasonably familiar with the documentation
\&\s-1BEFORE\s0 you choose to do this. Date::Manip is a hobby, and I simply do
not have time to respond to hundreds of questions which are already
answered in this manual.
.PP
If you find any problems with the documentation (errors, typos, or items
that are not clear), please send them to me. I welcome any suggestions
that will allow me to improve the documentation.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None known.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
